HANDLING A GET REQUEST:

The class-level @RequestMapping specification is refined with the @GetMapping annotation
that adorns the showDesignForm() method. @GetMapping, paired with the class
level @RequestMapping, specifies that when an HTTP GET request is received for /design,
Spring MVC will call showDesignForm() to handle the request.
@GetMapping is just one member of a family of request-mapping annotations.

Table 2.1 lists all of the request-mapping annotations available in Spring MVC.

<!-- Table 2.1 Spring MVC request-mapping annotations -->

    -ANNOTATION-				-DESCRIPTION-
    @RequestMapping              General-purpose request handling
    @GetMapping				     Handles HTTP GET requests
    @PostMapping 				 Handles HTTP POST requests
	@PutMapping					 Handles HTTP PUT requests
	@DeleteMapping				 Handles HTTP DELETE requests
	@PatchMapping				 Handles HTTP PATCH requests	
	
	
When showDesignForm() handles a GET request for /design, it doesn’t really do
much. The main thing it does is return a String value of "design", which is the
logical name of the view that will be used to render the model to the browser.

But before it does that, it also populates the given Model with an 
empty Taco.java object under a key whose name is "design".
This will enable the form to have a blank slate on which to
create a taco masterpiece.

 It would seem that a GET request to /design doesn’t do much. But on the contrary,
there’s a bit more involved than what is found in the showDesignForm() method.
You’ll also notice a method named addIngredientsToModel() that is annotated with
@ModelAttribute. This method will also be invoked when a request is handled and
will construct a list of Ingredient objects to be put into the model.
The list is hard coded for now. When we get to chapter 3,
you’ll pull the list of available taco ingredients from a database.

Once the list of ingredients is ready, the next few lines of addIngredientsToModel()
filters the list by ingredient type using a helper method named filterByType().
A list of ingredient types is then added as an attribute to the Model object that
will be passed into showDesignForm(). Model is an object that ferries data between a
controller and whatever view is charged with rendering that data. Ultimately, data
that’s placed in Model attributes is copied into the servlet request attributes, where the
view can find them and use them to render a page in the user’s browser.

Following addIngredientsToModel() are two more methods that are also annotated with @ModelAttribute.
These methods are much simpler and create only a new TacoOrder and Taco object to place into the model.
The TacoOrder object, referred to earlier in the @SessionAttributes annotation, holds state for the order being built as
the user creates tacos across multiple requests.
The Taco object is placed into the model so that the view rendered in response to the 
GET request for /design will have a non-null object to display.

Your DesignTacoController is really starting to take shape. If you were to run
the application now and point your browser at the /design path,
the DesignTacoController’s showDesignForm() and addIngredientsToModel() would be engaged,
placing ingredients and an empty Taco into the model before passing the request on
to the view. But because you haven’t defined the view yet, the request would take a
horrible turn, resulting in an HTTP 500 (Internal Server Error) error. To fix that, let’s
switch our attention to the view where the data will be decorated with HTML to be
presented in the user’s web browser.